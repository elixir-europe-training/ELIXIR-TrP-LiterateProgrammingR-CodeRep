{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#literate-programming-in-r","title":"Literate Programming (in R)","text":""},{"location":"#authors","title":"Authors","text":"<p>Elisa Pierfederici</p> <p>  PhD Candidate, Research advisor, University of Oslo (UiO), Norway  </p> <p>Clement Lee</p> <p>  Lecturer, School of Maths, Stats and Physics, Newcastle University </p> <p>Saad Arif</p> <p>  Saad Arif, Senior Lecturer, Dept. of BMS, Oxford Brookes University </p> <p>Mark Fernandes</p> <p>  Mark Fernandes, Teaching Associate, Bioinformatics Training Facility, Dept. of Genetics, University of Cambridge </p>"},{"location":"#lesson-overview","title":"Lesson overview","text":"<p> Description A course to introduce the theory, advantages and implementation of Literate Programming practices for R users working in RStudio to enhance the students abilities to produce reproducible code.    </p> <p></p> <p> Prerequisites To be able to follow this course, learners should have knowledge in: \u20031. Basic programming skills in R   \u20032. A familiarity in using the RStudio Integrated Development Environment    </p> <p></p> <p> Learning Outcomes: By the end of the course, learners will be able to:   \u20031. Have an understanding of the principles and goals of Literate Programming (LP) \u20032. Practically implement LP in their R programs using Markdown in Quarto/Rstudio      </p> <p></p> <p> Target Audience: Researchers, undergraduate students, postgraduate students, etc\u2026 </p> <p> Level: Beginner to Intermediate  </p> <p> License: Creative Commons Attribution 4.0 International License </p> <p> Funding: This project has received funding from [name of funders].  </p>"},{"location":"#contributors","title":"Contributors","text":"<p>Artemis</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Ares</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Nike</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Prometheus</p> <p>  Lorem ipsum dolor sit amet. </p>"},{"location":"#citing-this-lesson","title":"Citing this lesson","text":"<p>Please cite as:</p> <ol> <li>Enter your citation here.</li> <li>Geert van Geest, Elin Kronander, Jose Alejandro Romero Herrera, Nadja \u017dlender, &amp; Alexia Cardona. (2023). The ELIXIR Training Lesson Template - Developing Training Together (v1.0.0-alpha). Zenodo. https://doi.org/10.5281/zenodo.7913092. </li> </ol>"},{"location":"#setup","title":"Setup","text":""},{"location":"#data-setup","title":"Data setup","text":"<p>To run this lesson you need to install data from the Elixir CodeRep R script repository NB This currently points to the __Python___ example script - need Alexia to create one for R and then use link to that here....   </p>"},{"location":"#software-setup","title":"Software setup","text":"<p>To run this course you need to install the following:  </p> <ul> <li>R and Rstudio - please follow the instructions here for your machine.   </li> <li>Quarto - please follow the instructions here for your machine.</li> <li>TinyTex (R package) - required if you want to use LaTex and/or render PDFs. This is an R package, more info and installation instructions here</li> </ul>"},{"location":"course_schedule/","title":"Course schedule","text":"start end topic 10:00 10:30 coffee! 12:00 13:00 lunch! <p>Generate markdown tables at tablesgenerator.com</p>"},{"location":"keywords/","title":"Keywords","text":"<p>Here\u2019s a lit of used keywords:</p> <p>mkdocs </p>"},{"location":"chapters/Chapter_04/","title":"4. An Introduction to Quarto","text":""},{"location":"chapters/Chapter_04/#41-whats-our-goal","title":"4.1 What\u2019s Our Goal? \ud83c\udfaf","text":"<p>Welcome to Quarto!</p> <p>By the end of this chapter, you\u2019ll have a solid understanding of Quarto and how to use it to create reproducible, visually appealing scientific reports, presentations, and publications.</p>"},{"location":"chapters/Chapter_04/#42-what-is-quarto-and-why-does-it-matter","title":"4.2 What is Quarto, and Why Does It Matter? \ud83d\udcd6","text":"<p>Quarto isn\u2019t just a new version of R Markdown; it\u2019s a powerful tool made by Posit for data scientists, researchers, and anyone sharing knowledge. Built on Pandoc, this free tool works with many programming languages like R, Python, and Julia, and lets you create documents in formats such as HTML, PDF, and Word.</p> <p>Why Quarto is great: - Works with many languages: Facilitates seamless integration of R, Python, Julia, and Observable JS, catering to interdisciplinary projects. - Versatility in Output Formats: From academic PDFs to web pages and presentations, Quarto adapts your work for any audience. - Guaranteed Reproducibility: Ensures your research can be easily verified, fostering a culture of transparency and reliability.</p> <p>Quarto also lets you: - Make websites: Share your projects online. - Create learning materials: Build tutorials or textbooks for online learning.</p> <p>Check out the Quarto gallery to see its capabilities. </p>"},{"location":"chapters/Chapter_04/#43-before-we-begin","title":"4.3 Before We Begin","text":"<p>In this part of the tutorial, we\u2019ll focus on using Quarto with R. But remember, Quarto isn\u2019t limited to R \u2014 it also works with Python, Julia, and Observable JS!</p>"},{"location":"chapters/Chapter_04/#installation-guide","title":"Installation Guide","text":"<p>Before we start, it\u2019s essential to set up our environment. Here\u2019s what you need:</p> <ol> <li> <p>RStudio Installation: Ensure you have the latest version of RStudio. This will provide the best compatibility with Quarto.</p> </li> <li> <p>Quarto Installation: Visit the Quarto website for installation instructions. For a more detailed guide, check out the Quarto guide. Make sure to follow the steps appropriate for your operating system.</p> </li> <li> <p>TinyTeX Setup TinyTeX is a minimal TeX distribution specifically tailored for Quarto, which you\u2019ll need for generating PDFs. Here\u2019s how to install it: - Open RStudio, navigate to Tools &gt; Terminal &gt; New Terminal. - In the terminal, type quarto install tinytex to start the installation process.</p> </li> <li> <p>Update R Packages To ensure smooth operation with Quarto, update the following R packages by running this command in RStudio:</p> </li> </ol> <pre><code># Run in R\ninstall.packages(c(\n  \"tinytex\",       # Needed for PDF rendering\n  \"rmarkdown\",     # Essential for rendering\n  \"tidyverse\",     # Useful for data wrangling\n  \"knitr\",         # Required for table printing\n  \"kableExtra\"     # Enhances table printing\n))\n</code></pre>"},{"location":"chapters/Chapter_04/#44-lets-dive-in","title":"4.4 Let\u2019s Dive In!","text":""},{"location":"chapters/Chapter_04/#the-quarto-workflow","title":"The Quarto Workflow","text":"<p>Quarto simplifies document creation through a two-step process:</p> <ol> <li>Code Execution: Your Quarto document (<code>.qmd</code>) is first processed by knitr, which executes the code chunks embedded within the document, producing an intermediate Markdown (<code>.md</code>) file that includes both the original code and its output.</li> <li>Final Rendering:  The Markdown file is then handed over to pandoc, which converts it into the final document in the desired output format. This process is highly flexible, supporting a wide array of formats including HTML, PDF, and Word documents.</li> </ol> <p>[Include a visual diagram of the Quarto workflow here]</p>"},{"location":"chapters/Chapter_04/#understanding-the-quarto-document","title":"Understanding the Quarto Document","text":"<p>Quarto documents bring together code, results, and narrative in a single file, enhancing reproducibility and clarity. Here are the key components:</p> <ol> <li>The YAML Header: At the start of your document, the YAML header specifies important settings for document rendering, such as title, author, output formats, and more. This metadata is crucial for controlling the appearance and behavior of your final document.</li> <li>Quarto-formatted Text: Narrative text follows Markdown syntax, allowing for straightforward formatting of headers, lists, links, and more. This makes your document both readable and versatile.</li> <li>R Code Chunks: Enclosed by three backticks (```), code chunks can contain R code (or other supported languages) for executing within your document. These chunks can perform data analysis, visualize results, and more. You can directly copy and paste existing R scripts into these chunks, with Quarto handling the execution and integration of results into the final document.</li> </ol> <p>Quarto\u2019s flexibility extends to supporting multiple programming languages within the same document, facilitating interdisciplinary collaboration and analysis.</p> <p>Example Code:</p> <pre><code># ----read-data----\ncancer_data &lt;- read.csv(\"data/breast-cancer-wisconsin.csv\")\nhead(cancer_data)\ncancer_data$diagnosis &lt;- as.factor(cancer_data$diagnosis)\n</code></pre>"},{"location":"chapters/Chapter_04/#creating-your-first-quarto-document","title":"Creating Your First Quarto Document","text":"<p>Figure A: An example of a Quarto document in RStudio, showcasing integrated code and results.</p> <p>To start creating your own Quarto document in RStudio:</p> <ol> <li>Go to File &gt; New File &gt; Quarto Document\u2026.  </li> <li>Follow the prompts in the wizard to configure your document, choosing from a variety of templates and settings to suit your project\u2019s needs.</li> </ol>"},{"location":"chapters/Chapter_04/#yaml-header-metadata","title":"YAML Header (Metadata)","text":"<p>The YAML metadata in a Quarto document is crucial for defining the document\u2019s metadata, which influences its rendering. This metadata includes details like the document\u2019s title, author, desired output format, and other rendering options. It\u2019s encapsulated by three dashes (<code>---</code>) at the top of the document.</p> <p>Example YAML Header:</p> <pre><code>---\ntitle: \"Insightful Analysis\"\nauthor: \"Jane Doe\"\nexecute:\n  echo: false\nformat: html\n---\n</code></pre> <p>This header sets up the document with a title, an author, specifies that code echoes should be suppressed (echo: false), and designates HTML as the output format.</p>"},{"location":"chapters/Chapter_04/#rendering-a-qmd-document","title":"Rendering a Qmd Document","text":"<p>Rendering a <code>.qmd</code> (Quarto Markdown) document transforms it into a different format like HTML, PDF, or Word. This process compiles your code and applies settings from the document\u2019s YAML header. Before rendering, ensure your document is error-free.</p> <p>Steps to Render Your Document:</p> <ol> <li> <p>Save Your Document: Name it <code>my_first_qmd.qmd</code> and save it in an accessible location.</p> </li> <li> <p>Render: Locate and click the \u201cRender\u201d button in your Quarto editor. This button is often found at the top or bottom of the editor interface.</p> </li> </ol> <p>FIGURE: ![Insert a screenshot of the \u201cRender\u201d button here.]</p> <p>Excercise: Produce your own Quarto document</p> <ol> <li>Create a new Quarto document in your editor (e.g., RStudio).  </li> <li>Add a title and your name as the author in the YAML header.  </li> <li>Set the output format to HTML.  </li> <li>Render the document.</li> </ol> Solution <ol> <li>Create Document: In RStudio, use <code>File &gt; New File &gt; Quarto Document</code>.  </li> <li>Edit YAML Header: Add <code>title: \"Your Title\"</code> and <code>author: \"Your Name\"</code>.  </li> <li>Set Output: Ensure the YAML includes <code>format: html</code>.  </li> <li>Render: Click the \u201cRender\u201d button to produce your HTML document.Here are some potential problems we can think of (you may have similar):</li> </ol> <p>Insert screenshots demonstrating each step for clarity.</p> <pre><code>    To do : *[Provide screenshots of the solution here]* or describe it\n</code></pre>"},{"location":"chapters/Chapter_04/#45-writing-quarto-documents","title":"4.5 Writing Quarto Documents","text":""},{"location":"chapters/Chapter_04/#rstudio-visual-editor-simplified-formatting","title":"RStudio Visual Editor: Simplified Formatting","text":"<p>The RStudio Visual Editor offers a user-friendly approach to formatting Quarto documents, featuring a rich text interface similar to popular word processors. This guide will help you navigate the essential features of the Visual Editor to enhance your document creation process.</p>"},{"location":"chapters/Chapter_04/#activate-visual-mode","title":"Activate Visual Mode","text":"<p>To access the Visual Editor, click the \u201cVisual\u201d option at the top-left corner of the toolbar. This action activates a formatting toolbar reminiscent of Google Docs, providing intuitive access to formatting options.</p>"},{"location":"chapters/Chapter_04/#switch-between-modes","title":"Switch Between Modes","text":"<p>RStudio allows you to toggle between Source and Visual modes effortlessly, enabling you to work with the code directly or through the visual interface without losing your place. This flexibility ensures that you can enjoy the best of both worlds\u2014direct code manipulation and simplified visual editing.</p>"},{"location":"chapters/Chapter_04/#writing-text","title":"Writing Text","text":""},{"location":"chapters/Chapter_04/#adding-headings","title":"Adding Headings","text":"<p>Headings structure your document and guide your readers through sections. In the Visual Editor, headings can be added directly or through Markdown syntax.</p> <p>For keyboard shortcuts to add headings and other formatting, refer to the RStudio editing shortcuts (add link).</p> <p>Example:</p> <pre><code># Heading 1\nThis is a sentence with some **bold text**, some *italic text*, and an ![image](image.png).\n</code></pre>"},{"location":"chapters/Chapter_04/#creating-bullet-and-numbered-lists","title":"Creating Bullet and Numbered Lists","text":"<p>Lists are essential for organizing information in a readable format. Quarto supports both bullet and numbered lists, allowing you to structure your content effectively.</p>"},{"location":"chapters/Chapter_04/#bullet-lists","title":"Bullet Lists","text":"<p>To create a bullet list, start each item with a <code>-</code>, <code>*</code>, or <code>+</code>, followed by a space. This simple syntax transforms plain text into an organized list.</p> <p>Example:</p> <pre><code>- Item 1\n- Item 2\n  - Subitem 2.1\n  - Subitem 2.2\n- Item 3\n</code></pre>"},{"location":"chapters/Chapter_04/#numbered-lists","title":"Numbered Lists","text":"<p>For sequences or steps, numbered lists are the go-to. Begin each line with a number, followed by a period and a space. Quarto automatically takes care of the numbering for you, ensuring your list is orderly and sequential.</p> <pre><code>1. First step\n2. Second step\n   1. Substep a\n   2. Substep b\n3. Third step\n</code></pre>"},{"location":"chapters/Chapter_04/#adding-images","title":"Adding Images","text":"<p>Images significantly enhance the visual appeal and clarity of documents. To insert an image in Quarto, use the following syntax:</p> <p></p><pre><code>![Alt text for the image](path/to/image.png \"Optional title\")\n</code></pre> Browse and Insert: Click on the image icon in the formatting bar, browse your computer to find the image file, and insert it into your Qmd document."},{"location":"chapters/Chapter_04/#adding-links","title":"Adding Links","text":"<p>Links are essential for directing your readers to external references or for providing further reading materials. Adding links in Quarto is straightforward with the following Markdown syntax:</p> <pre><code>[Link text here](https://www.example.com \"Optional title\")\n</code></pre> <p>The text within square brackets <code>[ ]</code> is what your readers will see as clickable text, and the URL within parentheses <code>( )</code> is where the link will take them upon clicking. An \u201cOptional title\u201d can also be included within quotes after the URL, which will appear as a tooltip during a mouse hover over the link.</p>"},{"location":"chapters/Chapter_04/#creating-tables","title":"Creating Tables","text":"<p>Tables in Quarto are created using Markdown syntax. It\u2019s a simple way to organize your data visually. Here\u2019s how you do it:</p> <p></p><pre><code>| Header 1 | Header 2 | Header 3 |\n|----------|----------|----------|\n| Row 1    | Data     | Data     |\n| Row 2    | Data     | Data     |\n</code></pre> This syntax easily organizes your data into a table with three columns. Use <code>|</code> to delineate each column and <code>-</code> to separate the header from the rows."},{"location":"chapters/Chapter_04/#adding-formulas","title":"Adding Formulas","text":"<p>Quarto integrates LaTeX support, enabling the addition of mathematical formulas directly within your documents, both inline within text and as standalone block elements.</p>"},{"location":"chapters/Chapter_04/#inline-formulas","title":"Inline Formulas","text":"<p>For formulas that should appear within your text, use single dollar signs <code>$...$</code> to enclose the LaTeX code:</p> <p></p><pre><code>An example of an inline formula is the equation for energy, $E=mc^2$.\n</code></pre> <pre><code>$\\frac{n!}{k!(n-k)!} = \\binom{n}{k}$\n</code></pre>"},{"location":"chapters/Chapter_04/#46-code-in-quarto-documents","title":"4.6 Code in Quarto Documents","text":"<p>Quarto introduces a unique approach to integrating code within your documents. Unlike traditional code writing that starts directly with code blocks, Quarto emphasizes starting with your narrative - your text. This raises an interesting question: how does Quarto differentiate between narrative text and code without resorting to traditional comment indicators like <code>#</code>?</p>"},{"location":"chapters/Chapter_04/#enter-code-chunks","title":"Enter Code Chunks","text":"<p>Code chunks are Quarto\u2019s solution to seamlessly weave your narrative with the power of code. Think of code chunks as magical gateways that allow your words to interact with code, creating a dynamic and interactive document. Here\u2019s a closer look at how this works:</p>"},{"location":"chapters/Chapter_04/#understanding-knitr","title":"Understanding Knitr","text":"<p>Knitr is the engine under the hood of RStudio that brings to life the dynamic features of Quarto documents. It facilitates the inclusion of R code within your Quarto documents, enabling output in various formats such as HTML, Word, PDF, or LaTeX. This tool is pivotal in the practice of Literate Programming, making your analytical work reproducible and transparent.</p>"},{"location":"chapters/Chapter_04/#crafting-your-narrative-with-code-chunks","title":"Crafting Your Narrative with Code Chunks","text":""},{"location":"chapters/Chapter_04/#how-to-insert-a-code-chunk","title":"How to Insert a Code Chunk","text":"<p>Inserting a code chunk into your Quarto document can be done in several ways, ensuring flexibility in how you compose your document:</p> <ul> <li>Use the Insert &gt; Code Chunk option from the RStudio editor\u2019s toolbar for a graphical interface approach.</li> <li>Manually type in the code chunk delimiters: <code>{r}</code> followed by triple backticks (```) to begin, and triple backticks (```) to end the chunk.</li> <li>Remember, if you\u2019re manually typing, ensure you close the chunk with triple backticks.</li> <li>Utilize a quick keyboard shortcut for efficiency: <code>Ctrl + Alt + I</code> on Windows or <code>Cmd + Option + I</code> on Mac.</li> </ul> <p></p><pre><code># This is an example of a code chunk\ncancer_data &lt;- cancer_data |&gt; select(where(~ all(!is.na(.x))))\nhead(cancer_data)\n</code></pre> \ud83d\udcf7 [Include a figure or screenshot showing how to add an R code chunk here]"},{"location":"chapters/Chapter_04/#configuring-code-chunk-options","title":"Configuring Code Chunk Options","text":"<p>Quarto provides several options to customize how code chunks behave in your document:</p> <ul> <li><code>include</code>: Should the output be included in the document? Typically set to yes.</li> <li><code>eval</code>: Should the code be executed? Default is yes, but you can specify particular lines if needed.</li> <li><code>echo</code>: Do you want to display the code itself in the document? Usually yes.</li> <li><code>results</code>: Determines if the code\u2019s output should be displayed. Generally yes.</li> <li><code>warning</code>: Choose whether to show any warnings generated by the code. Often set to yes.</li> <li><code>message</code>: Decide if messages produced during code execution should be visible. Commonly yes.</li> </ul> <p>Each of these options can be used by adding them to the first line of your code chunk, within the curly braces. Here\u2019s an example:</p> <p></p><pre><code>#| echo: false, eval: true\ncancer_data &lt;- cancer_data |&gt; select(where(~ all(!is.na(.x))))\nhead(cancer_data)\n</code></pre> This will execute the code without displaying the code chunk itself in the final document but will show the output."},{"location":"chapters/Chapter_04/#naming-your-code-chunk","title":"Naming Your Code Chunk","text":"<p>While optional, naming your code chunks can greatly enhance the manageability and referenceability of your document, especially for complex projects:</p> <pre><code>#| label: my-chunk-name\ncancer_data &lt;- cancer_data |&gt; select(where(~ all(!is.na(.x))))\nhead(cancer_data)\n</code></pre> <p>To label a chunk, use the syntax <code>#| label: chunk-label</code>, ensuring each label is unique within your document. Naming a chunk allows you to reference its output elsewhere in your document, making your work more organized and navigable.</p>"},{"location":"chapters/Chapter_04/#benefits-of-naming-code-chunks","title":"Benefits of Naming Code Chunks","text":"<p>Naming your code chunks provides several advantages:</p> <ul> <li>Improved Organization: It helps in keeping your document structured and organized, making it easier to find specific chunks of code.</li> <li>Ease of Reference: Named chunks can be easily referenced in your narrative text or in other code chunks, facilitating cross-referencing within the document.</li> <li>Better Documentation: Descriptive names act as comments, explaining the purpose of the code chunk or the type of output it generates.</li> </ul>"},{"location":"chapters/Chapter_04/#how-to-reference-named-chunks","title":"How to Reference Named Chunks","text":"<p>You can reference the output of a named chunk by using its label in cross-references within your Quarto document. This feature is particularly useful for creating dynamic documents where the output of analyses needs to be discussed or compared in the narrative sections.</p>"},{"location":"chapters/Chapter_04/#best-practices-for-naming-code-chunks","title":"Best Practices for Naming Code Chunks","text":"<p>When naming your code chunks, consider the following best practices:</p> <ul> <li>Be Descriptive: Choose names that clearly describe the purpose or outcome of the code chunk.</li> <li>Keep it Short and Simple: While being descriptive, also try to be concise to keep the readability of the document high.</li> <li>Use a Consistent Naming Scheme: This could be based on the type of analysis, data being used, or the output being generated. Consistency helps in quickly understanding the role of different code chunks in your document.</li> </ul>"},{"location":"chapters/Chapter_04/#example-of-naming-and-referencing-code-chunks","title":"Example of Naming and Referencing Code Chunks","text":"<pre><code>#| label: data-summary\nsummary(cars)\n</code></pre> <p>In the narrative sections of your Quarto document, the ability to reference named code chunks can significantly enhance the clarity and coherence of your explanations. By directly linking to the results or analyses provided by specific chunks, you create a more interactive and connected document. This approach not only improves the flow of your document but also makes it easier for readers to follow your analytical journey.</p>"},{"location":"chapters/Chapter_04/#linking-to-named-chunks-in-your-narrative","title":"Linking to Named Chunks in Your Narrative","text":"<p>When you want to mention or discuss the output of a code chunk within your narrative, you can refer to it by its label. This method allows you to seamlessly integrate your analytical findings with your textual explanations, making your document more dynamic and informative.</p>"},{"location":"chapters/Chapter_04/#example-of-referencing-a-named-chunk","title":"Example of Referencing a Named Chunk","text":"<p>Assume you have a code chunk labeled <code>plot-distribution</code> that generates a plot of data distribution. In your narrative, you could refer to this plot like so:</p> <p></p><pre><code>See the distribution of our data in the \"plot-distribution\" section below\n</code></pre> This textual reference guides readers directly to the relevant analysis, enhancing the document\u2019s navigability."},{"location":"chapters/Chapter_04/#integrating-a-bibliography-in-quarto-documents","title":"Integrating a Bibliography in Quarto Documents","text":"<p>In Quarto documents, integrating a bibliography allows you to cite sources and references seamlessly within your text, enhancing the credibility and resourcefulness of your work. Quarto supports bibliographies by leveraging the power of R and the Pandoc citation processing system. To include a bibliography in your Quarto document, follow these steps:</p> <p>Step 1: Prepare Your Bibliography File First, you\u2019ll need a bibliography file. This file is usually in BibTeX format, a common format for storing reference information. Create a file named  <code>references.bib</code> and include your bibliography entries in it. Each entry in the BibTeX file has a specific structure, starting with the type of reference ( <code>@article</code>,  <code>@book</code>, etc.), followed by a citation key and the details of the reference.</p> <p></p><pre><code>@article{Doe2023,\n  title={Title of the Article},\n  author={Doe, John and Roe, Jane},\n  journal={Journal of Important Studies},\n  volume={42},\n  number={1},\n  pages={123-456},\n  year={2023},\n  publisher={Publishing House}\n}\n</code></pre> For more details on BibTeX format, visit BibTeX.org. <p>Step 2: Include Your Bibliography in the YAML Header In the YAML header of your Quarto document, add a line to specify the bibliography file:</p> <pre><code>bibliography: references.bib\n</code></pre> <p>Step 3: Cite References in Your Document To cite references within your text, use Pandoc\u2019s citation syntax. Here\u2019s how you can reference the work in your narrative:</p> <p></p><pre><code>As discussed in the findings of Doe et al. [@Doe2023, p. 123].\n</code></pre> The <code>@Doe2023</code> corresponds to the citation key from your  <code>references.bib</code> file. <p>Step 4: Choose a Citation Style (Optional) If you want your citations and bibliography to be formatted in a specific style, you can specify a Citation Style Language (CSL) file in the YAML header:</p> <p></p><pre><code>csl: your-style.csl\n</code></pre> There are many CSL files available for different journals and style guides, allowing you to customize how your references are displayed. <p>Step 5: Generate Your Document When you render your Quarto document, the system will process the citations and automatically generate a bibliography section at the end of your document, formatted according to your specified style. This process ensures that all cited works are properly referenced, making your document both professional and informative.</p> <p>For further details on managing citations within Quarto using the visual editor, refer to the official Quarto documentation on citations. </p>"},{"location":"chapters/Chapter_04/#47-lets-build-a-quarto-paperdocument","title":"4.7 Let\u2019s Build a Quarto Paper/Document","text":""},{"location":"chapters/Chapter_04/#practical-exercises","title":"Practical Exercises","text":"<p>In this section, we\u2019ll dive into hands-on exercises to apply what we\u2019ve learned about Quarto and R. Ensure you\u2019re ready to follow along by downloading the necessary data from Kaggle: Breast Cancer Wisconsin Data.</p>"},{"location":"chapters/Chapter_04/#step-0-create-a-yaml-header","title":"Step 0: Create a YAML Header","text":"<p>Objective: Set up the YAML header for your document titled \u201cBreast Cancer Data Analysis\u201d.</p> <p>Instructions:</p> <ol> <li>Title the document \u201cBreast Cancer Data Analysis.\u201d  </li> <li>Specify the author as your research team\u2019s name.  </li> <li>Include a bibliography file named \u201creferences.bib.\u201d  </li> <li>Make sure the document includes the current date.  </li> <li>Enable a table of contents.  </li> <li>Number the sections.  </li> <li>Use the Pygments highlight style for code.  </li> <li>Hide code echo during execution.  </li> <li>For HTML output, enable code folding, code tools, and paged data frame printing.  </li> <li>Indicate a preference for the visual editor.</li> </ol> Solution: YAML Header <p> </p><pre><code>title: \"Breast Cancer Data Analysis\"\nauthor: \"Your Research Team's Name\"\nbibliography: references.bib\ndate: \"`r Sys.Date()`\"\ntoc: true\nnumber-sections: true\nhighlight-style: pygments\nexecute:\n  echo: false\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n    df-print: paged\neditor: visual\n</code></pre>  **Figure 2**: Example of how the Quarto HTML document head looks.    ![Quarto HTML Document Head](./Figure_CodRep/CodeRep1.png)"},{"location":"chapters/Chapter_04/#step-1-import-required-packages","title":"Step 1: Import Required Packages","text":"<p>In this step, we\u2019ll ensure that all necessary R packages are loaded for our analysis. These packages provide functions for data manipulation, visualization, and analysis.</p> <p>Task: Incorporate the provided code into your Quarto document to load the necessary R packages for our analysis.</p> Exercise: Import Required Packages (Step 1) <p> </p><pre><code># Load the required packages\nlibrary(tibble)   # For data frames.\nlibrary(dplyr)    # For data manipulation.\nlibrary(readr)    # For reading CSV files.\nlibrary(ggplot2)  # For data visualization.\nlibrary(caret)    # For machine learning.\nlibrary(ROCR)     # For ROC curves.\nlibrary(pROC)     # For AUC and ROC analysis.\ntheme_set(theme_bw(12))  # Set a theme for ggplot2.\nknitr::opts_chunk$set(fig.align = \"center\")\n</code></pre> Solution <p>  **Figure 3**: Example of importing packages in Quarto.   ![Importing Packages in Quarto](./Figure_CodRep/CoderRep2.png)  </p>"},{"location":"chapters/Chapter_04/#step-2-insert-text-and-code","title":"Step 2: Insert Text and Code","text":"<p>Integrating text and code into your Quarto document is crucial for creating a dynamic document that not only presents data analysis but also explains the context and significance of the findings.</p> Material: Reading Data and Initial Analysis  Text: \"Now we read the data, which is available as a CSV file in the relative path breast-cancer-wisconsin/. Using various R functions, we'll have a glimpse of its structure and dimensions. We also convert the diagnosis variable to a factor, facilitating further analysis.\"  Code:  <pre><code>cancer_data &lt;- as_tibble(read.csv(\"data/breast-cancer-wisconsin.csv\"))\nhead(cancer_data)\ncancer_data$diagnosis &lt;- as.factor(cancer_data$diagnosis)\ncolnames(cancer_data)\ndim(cancer_data)\n</code></pre> Text: \"Reflecting on the dimensions displayed above, this data frame consists of r nrow(cancer_data) rows and r ncol(cancer_data) columns. Except for the first two columns, the remaining columns are features computed from a digitized image of a fine needle aspirate (FNA) of a breast mass, describing characteristics of the cell nuclei present in the image.\"  Follow-Up Code: <pre><code>cancer_data &lt;- cancer_data |&gt; select(where(~ all(!is.na(.x))))\nhead(cancer_data)\n</code></pre> After removing columns with missing values, our dataset is now more streamlined for analysis. This preprocessing step is crucial for ensuring the accuracy of our subsequent analyses.   <p>Task: Add the provided texts and corresponding code snippets into your Quarto document, utilizing Markdown formatting to emphasize key points or terms.</p> <p>Instructions:</p> <ol> <li>Add the provided text and corresponding R code snippets into the body of your Quarto document.</li> <li>Emphasize key points or terms using Markdown formatting (e.g., bold, italic).</li> </ol>"},{"location":"chapters/Chapter_04/#step-3-visualizations-in-quarto-documents","title":"Step 3: Visualizations in Quarto Documents","text":"<p>Creating visualizations is key to exploring and presenting data effectively. Quarto integrates seamlessly with ggplot2, allowing for complex visualizations to be included directly within your document.</p> <p>Exercise: Generate a Scatter Plot Objective: Create a scatter plot to explore the relationship between mean_radius and mean_texture of tumor cells, distinguishing between benign and malignant diagnoses.</p> Material: Scatter Plot Creation Code: <pre><code>library(ggplot2)\nggplot(cancer_data, aes(x = mean_radius, y = mean_texture, color = diagnosis)) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Scatter Plot of Mean Radius vs. Mean Texture\",\n       x = \"Mean Radius\",\n       y = \"Mean Texture\")\n</code></pre> <p>Task: Use the provided code to add a scatter plot to your Quarto document. Experiment with different ggplot2 options to customize the plot\u2019s appearance.</p>"},{"location":"chapters/Chapter_04/#step-4-reporting-tables-in-quarto-documents","title":"Step 4: Reporting Tables in Quarto Documents","text":"<p>Quarto can dynamically generate and display tables from R code, making it easy to present data analyses in a structured format.</p> <p>Exercise: Create a Summary Table Objective: Generate a table summarizing the count of malignant and benign tumors within the dataset.</p> Material: Summary Table Creation Text: \"Using the diagnosis column in the data, we find that there are a certain number of Malignant and Benign tumors.\"  Code for Summary Table: <pre><code>summary_counts &lt;- cancer_data %&gt;%\n  group_by(diagnosis) %&gt;%\n  summarise(Count = n())\n\nknitr::kable(summary_counts, caption = \"Counts of Tumors by Diagnosis\")\n</code></pre> <p>Task: Incorporate the provided text and code into your document to create a summary table of tumor counts by diagnosis. Explore different options with knitr::kable() to format your table.</p> <p>ADD SCREENSHOT ON HOW IT LOOK </p>"},{"location":"chapters/Chapter_04/#step-4-reporting-tables","title":"Step 4: Reporting tables","text":"Solution: Insert text and code (Step 2)  Statistical tests    We can perform two-sample *t*-test to find out if there is a significant difference in the distribution of a feature according to the tumour status. <pre><code>area_worst_B &lt;- cancer_data$area_worst[cancer_data$diagnosis == \"B\"]\narea_worst_M &lt;- cancer_data$area_worst[cancer_data$diagnosis == \"M\"]\nttest0 &lt;- t.test(area_worst_B, area_worst_M, var.equal = TRUE)\noptions(scipen = 3, digits = 3)\n</code></pre>  The $t$-statistic is `r ttest0$statistic` and the $p$-value is `r ttest0$p.value`. We can write a function to carry out the test more systematically: <pre><code>ttest1 &lt;- ttest_var(cancer_data, var = area_worst)\nttest2 &lt;- ttest_var(cancer_data, var = fractal_dimension_mean)\nttest3 &lt;- ttest_var(cancer_data, var = radius_se)\n</code></pre>  The results are in the following table:  | Variable | $t$-statistic | $p$-value | |----------|---------------|-----------| |Area worst|`r ttest1$statistic`| `r ttest1$p.value`| |Fractal dimension mean|`r ttest2$statistic`| `r ttest2$p.value`| |Radius se|`r ttest3$statistic`| `r ttest3$p.value`|  <p>TO DO:</p> <ol> <li>fix further this part of the exercise, in content but also appearance</li> <li>add the entire render document at the very end </li> </ol>"},{"location":"chapters/chapter_01/","title":"1. The concepts and goals of Literate Programming","text":""},{"location":"chapters/chapter_01/#11-what-is-literate-programming","title":"1.1 What is Literate programming?","text":"<p>The expression \u201cLiterate programming\u201d was coined in 1984 by the Mathematician, Computer Scientist and Professor Emeritus at Stanford University Donald Knuth. </p> <p>  It involves an explanation of how a program works in a natural language as opposed to the syntax of a formal programming language (Like R &amp; Python).  Another contribution made to this field by Knuth is the TeX mathematical typsetting language that can be used to insert production quality mathematical formulae into documents using panin text ASCII characters - it is used in the freely available LaTeX software.   </p> <p>Example LaTeX code</p> <p><code>The quadratic formula is $-b \\pm \\sqrt{b^2 - 4ac} \\over 2a$</code>  The quadratic formula is \\({-b \\pm \\sqrt{b^2 - 4ac} \\over 2a}\\) </p>"},{"location":"chapters/chapter_01/#12-why-do-we-need-literate-programming","title":"1.2 Why do we need Literate programming?","text":"<p>Have you ever considered how a computer \u201creads\u201d its instructions? At the silicon level (Machine code) the language is purely binary numbers i.e. 1s and 0s and comprise of extremely mechanistic operations e.g. roll bits to left. This is not very intuitive to humans so when we write computer programs we tend to write them in high-level languages like R &amp; Python which are a very structured, very natural form of English.  </p> <p>They are written to be read and understood by Humans. In fact, other programs (interpreters and compilers are necessary for the computer to actually make sense of our code. Since this form of the code is clearly designed to be read by humans, it is emminently sensible to make the logical goals of the program equally readasble by humans.    </p> <p>Like any other form of scientific communication (Papers, Posters or Lectures) an anlysis script or program is a narration of a scientific story. Use of Literate programming enables us to annotate the programs code with meaningful insights into the assumptions, considerations and decisions involved in the analyssis of the data. Which, in turn, leads to more unerstandable and reproducible research.  </p> <pre><code>    recur_fact &lt;- function(n) {\n    if(n &lt;= 1) {    \n       return(1) }    \n    else {    \n       return(n * recur_fact(n-1)) }    \n    }    \n    recur_fact(5)\n</code></pre> <p>Exercise in Literate Programming thinking</p> <p>Above is some example code - try describing what it does and how it is calculated as if you were   explaining it to a non-programmer</p> Solution <p>This is an example of some R code that calculates the factorial of n by the process of recursion such that: \\({n! = n \\times (n-1) \\times \\dots \\times 1}\\)</p> <p>(and yes it is possible to write equations in LaTex in some Literate programming documents!)</p>"},{"location":"chapters/chapter_01/#13-how-can-we-implement-literate-programming","title":"1.3 How can we implement Literate programming?","text":"<p>We could choose to annotate our code in many ways. Programming languages both feature and encourage the use of comments in coding. Whilst these are adequate for discussing the program in terms of the feature-set of the programming language, they are lacking in the ability to provide rich formatted dialogue with emphasus styles such as bold and italics or to incorporate images and diagrams. Similarly, the code and it\u2019s outputs remain distinct and seperate entities.    </p> <p>So what would help us is a language that can have the code and its outputs embedded in our exposition of the analysis. This should be written in a form aimed at humans not computers and spporting rich formatting similar to a word-processed document.   </p> <p>In this course, one of the key deliverables is for you to gain familiarity with a language called Markdown. This is a very simple language that enables you to code formatted text using a simple ASCII text editor and in appropriate Integrated Design Environments (IDEs) like PyCharm, Quarto,Jupyter Notebooks and Rstudio allow you to intersperse foramtted text blocks with computer code chunks and practically implement the concept of literate programming.   </p> <p>Another deliverable of this course will be to also provide an introduction to at least one of these IDEs and how they support you in carrying out literate programming.   </p> <p>There will be a practical implementation of literate programming where we will transform a plain script into an annotated, rich markdown implementation that retains the functionality of the computational workflow but additionally narrates the concepts of said workflow.   </p> <p>Ranking desirable features in a Literate Programming tool</p> <p>Discuss/Rank these with 1 = most important to 4 = least important:   a) Inclusion of program outputs  b) Ability to view/edit in any plain text editor  c) (Progamming)Language-agnostic   d) Ability to be exported to other formats (e.g. PDF, Word &amp; HTML web-pages)    </p> Solution <p>The point of this exercise was to get you to think about the benefits of a Literate Programming tool. In fact, all of these  are pretty important (Especially with respec t to reproducibility). As you proceed through the course, please assess what  we teach you with respect to the features mentioned in this question.    </p>"},{"location":"chapters/chapter_01/#14-how-do-we-get-there-from-here","title":"1.4 How do we get there from here?","text":"<p>The next sessions of this course will equip you with core knowledge of Markdown (and more specifically RMarkdown and fam,iliarise you with some software tools to enable you to go from code like this:   </p> <p> to a document like this:      </p>"},{"location":"chapters/chapter_02/","title":"2. The Literate Programming Approach: A Primer","text":""},{"location":"chapters/chapter_02/#21-introduction","title":"2.1 Introduction","text":"<p>This chapter is a gentle introduction to the literate programming approach, with the following learning outcomes: </p> <ul> <li>Understand why the old, manual approach of analysis and reporting does not facilitate reproducibility</li> <li>Learn the key concepts of literate programming</li> <li>Appreciate the usefulness of literate programming</li> <li>Familiarise with (the names of) the components covered in the next few chapters</li> </ul>"},{"location":"chapters/chapter_02/#22-the-old-workflow","title":"2.2 The Old Workflow","text":"<p>To begin with, let me ask you a couple of questions:</p> <ol> <li>How do you usually organise your scripts and files when you conduct research?</li> <li>What is your workflow of creating a deliverable (report, presentation slides, etc.) from these scripts?</li> </ol>"},{"location":"chapters/chapter_02/#221-example-structure","title":"2.2.1 Example structure","text":"<p>You may have the following files in a folder:</p> <pre><code>#&gt; |--- data\n#&gt; |    |--- breast-cancer-wisconsin.csv\n#&gt; |\n#&gt; |--- analysis.R\n#&gt; |--- histogram.jpg\n#&gt; |--- correlation.png\n#&gt; |--- report.tex\n#&gt; |--- report.log\n#&gt; |--- references.bib\n</code></pre> <p>They can be put into the following groups:</p> <ol> <li>data (.csv)</li> <li>programming scripts (.R)</li> <li>image files (.png, .jpg, etc.)</li> <li>plain text files (.tex)</li> <li>auxiliary files (.bib, .log, subfolders)</li> </ol> <p>While you may not have come across with files with extension .tex, you are likely to have worked with .txt files, which are also plain text files without any text formatting.</p>"},{"location":"chapters/chapter_02/#222-example-workflow","title":"2.2.2 Example workflow","text":"<p>These steps are usually followed:</p> <ol> <li>run the programming scripts in an Integrated Development Environment (IDE),</li> <li>save the required plots to the image files,</li> <li>edit the plain text files (writing the explanatory text and inserting numbers and tables manually), and</li> <li>generate the report or the slides you want.</li> </ol> <p>If you are working with others, you may be collaborating through a tool such as Overleaf, and this means an extra step of uploading the files before the final step. Done and dusted.</p>"},{"location":"chapters/chapter_02/#223-changing-the-data-analysis","title":"2.2.3 Changing the data / analysis","text":"<p>Now, it is common that the analysis changes direction as you go along, and/or that the data is updated. What do you do when that happens? You re-run the scripts, save the image files, (optionally) upload them, and generate the deliverable again. And this is usually done multiple times and in an iterative fashion. One or more of the following scenarios eventually happens:</p> <ol> <li>You have changed the analysis and edited the programming scripts on your computer, but have not updated the results (plots, numbers, tables) in the plain text files. When you revisit the deliverable after some time, the results reported do not match what you get from running the scripts.</li> <li>You have decided to change the analysis to a previous direction, but because the scripts have been updated, you cannot revert exactly to what you want.</li> <li>To avoid the above scenario, you create a new set of programming scripts every time you change the analysis. Eventually it becomes difficult to find the right version (again).</li> </ol> <p>If you feel dissatisfied with this workflow, you will benefit from this training programme. You will be able to adopt a more efficient workflow that not only generates a deliverable with reproducible results, but also keeps track of the versions of the files so there won\u2019t be anything like <code>presentation-final-final-02.pdf</code>.</p>"},{"location":"chapters/chapter_02/#23-literate-programming","title":"2.3 Literate Programming","text":"<p>Practically, literate programming (almost) means merging the .R and .tex files in the old workflow. Let\u2019s start with a snippet of a non-literate-programming R script (you can access the full script here):</p> <pre><code>cancer_data &lt;- read.csv(\"data/breast-cancer-wisconsin.csv\") # load the data\nhead(cancer_data) # print the first few lines\ndim(cancer_data) # the dimensions\ncolnames(cancer_data) # column names\n</code></pre> <p>It is an acceptable practice to comment the code so others, including your future self, will understand the analysis. However, the comments make the code more difficult to read as the analysis expands, and it is better to have the code and the text that explains the analysis (called the prose hereafter) in separate sections, but still in the same file. This is the essence of literate programming.</p>"},{"location":"chapters/chapter_02/#231-first-pass","title":"2.3.1 First pass","text":"<p>Let\u2019s try to separate the code and prose in the same file in the most naive way, without thinking about what format it is yet:</p> <pre><code>We first load the Wisconsin breast cancer data:\ncancer_data &lt;- read.csv(\"data/breast-cancer-wisconsin.csv\")\nThen we print the first few lines, the dimensions and the column names:\nhead(cancer_data)\ndim(cancer_data)\ncolnames(cancer_data)\n</code></pre> <p>Excercise</p> <p>Can you think of any potential problems with this piece of code?</p> Solution <p>Here are some potential problems we can think of (you may have similar):</p> <ol> <li>How does someone else tell the code from the data?</li> <li>This piece of code cannot be run as running the prose will return errors. Then what good does it do to me?</li> </ol>"},{"location":"chapters/chapter_02/#232-second-pass","title":"2.3.2 Second pass","text":"<p>It is the worst of both worlds if neither a human nor a machine can understand the lines. Fortunately, standards and syntaxes have been created to make literate programming possible. This is how such a script looks like:</p> <pre><code>We first load the Wisconsin breast cancer data: \n\n```{r}\ncancer_data &lt;- read.csv(\"data/breast-cancer-wisconsin.csv\")\n```\n\nThen we print the first few lines, the dimensions and the column names:\n\n```{r}\nhead(cancer_data)\ndim(cancer_data)\ncolnames(cancer_data)\n```\n</code></pre> <p>Notice the extra lines that begin with triple backticks, which separate the prose from the code. We shall call any R code, together with the preceding line (triple backticks and <code>{r}</code>) and succeeding line (triple backticks) a code chunk. Code chunks will be an important concept throughout.</p>"},{"location":"chapters/chapter_02/#233-self-contained-file","title":"2.3.3 Self-contained file","text":"<p>What you have seen above is just a snippet. A self-contained file will look like this: </p><pre><code>---\ntitle: \"Analysis of Wisconson Breast Cancer Data\"\ndate: \"2023-06-06\"\nauthor: \"CodeRep Literate Programming Team\"\noutput: pdf_document\n---\n\nWe first load the Wisconsin breast cancer data: \n\n```{r}\ncancer_data &lt;- read.csv(\"data/breast-cancer-wisconsin.csv\")\n```\n\nThen we print the first few lines, the dimensions and the column names:\n\n```{r}\nhead(cancer_data)\ndim(cancer_data)\ncolnames(cancer_data)\n```\n</code></pre>"},{"location":"chapters/chapter_02/#234-the-components","title":"2.3.4 The components","text":"<p>This hybrid format starts to get confusing, as you may wonder what all those triple dashes, triple backticks, lines at the top etc. do. This is a good point to preview the next few chapters:</p> <ol> <li>The syntax of the file, barring the code chunks, is in Markdown, which will be introduced in next chapter. If you have used LaTeX to write documents, Markdown is a similar (yet simpler) typesetting system. As we will see, it has a gentler learning curve and more functionality to offer.</li> <li>At the top, between the two lines of triple dashes, those few lines are what we called YAML. If you look it up on Wikipedia, you might not find the definition of YAML very useful. However, it is an integral part of Markdown, as it makes the deliverable look how you want it. An equivalent in LaTeX is the preamble before <code>\\begin{document}</code>.</li> <li>The file format is called Quarto (Chapter 4), which facilitates the interweaving of code chunks and prose. When you save the file, the file extension is .qmd. </li> </ol>"},{"location":"chapters/chapter_02/#24-unleashing-the-powers-of-quarto-and-markdown","title":"2.4 Unleashing the Powers of Quarto and Markdown","text":"<p>You will find that we have gone quite far if you compare the first R code snippet and the self-contained file, which we will name <code>wisconsin.qmd</code>. But fundamental questions remain: Why should you bother? How does literate programming resolve the issues we mentioned?</p>"},{"location":"chapters/chapter_02/#241-reproducibility","title":"2.4.1 Reproducibility","text":"<p>This is one of the biggest selling points of literate programming. As we will see in coming chapters, how the self-contained file is written allows results to be generated on the fly when you generate the deliverable.</p> <p>Exercise</p> <p>What good does generating the results on the fly practically do? In other words, how has the workflow changed for the better?</p> Solution <p>Here are a few changes that would occur to the workflow:</p> <ol> <li>You do not need to run <code>analysis.R</code> first to save <code>histogram.jpg</code> and <code>correlation.png</code>, before generating the deliverable in <code>report.tex</code>. You just make any necessary changes in <code>wisconsin.qmd</code>.</li> <li>The same goes for numbers and tables. You do not need to pre-compute say the \\(t\\)-statistic, manually input in <code>report.tex</code>, and then generate the deliverable. Again, just edit <code>wisconsin.qmd</code>.</li> <li>Your collaborator sends you a new set of data with more rows? No problem, the dimensions (<code>dim(cancer_data)</code>) and everything else will be updated.</li> </ol> <p>The answers to the question above are what reproducibility is about.</p>"},{"location":"chapters/chapter_02/#242-version-control-and-more","title":"2.4.2 Version control, and more","text":"<p>Reproducibility is greatly enhanced if you combine literate programming with version control. Essentially, you track the changes made to <code>wisconsin.qmd</code> and all the other files (but pherhaps not in the same way word processing systems track changes in word documents), so the safety net of previous versions is always there for you to fall back in case mistakes are made in your analysis. Practically and more importantly, you will not need to duplicate files and name them <code>wisconsin-draft.qmd</code>, <code>wisconsin-draft-02.qmd</code>, <code>wisconsin-final.qmd</code>, <code>wisconsin-final-final.qmd</code>. You will learn more in the module on version control.</p> <p>There is more that needs to be done to complete reproducibility i.e. your analysis can be full reproduced on someone else\u2019s computer, without the need of ever say \u201cbut it worked on my computer yesterday\u201d. This is where documentation, software testing, CI/CD, and containers come in.</p>"},{"location":"chapters/chapter_02/#243-same-script-multiple-formats","title":"2.4.3 Same script, multiple formats","text":"<p>The whole system of Quarto and Markdown allows us to generate deliverables in multiple formats. Usually it involves (almost) changing nothing in the .qmd file. You have created some slides in pdf and want to convert them to html so that you can host them on your website? There\u2019s no need for conversion, you can generate the html slides directly. You have written a pdf document and need to change it to word document (e.g. for some collaborators who work with word documents exclusively) and html page (e.g. for accessibility reasons)? No problem, just focus on writing the content, Quarto and Markdown will take care of the formats for you, once you specify what you want (this is, as you will learn, where YAML comes in).</p>"},{"location":"chapters/chapter_02/#244-testament","title":"2.4.4 Testament","text":"<p>You may already notice the self-referentiality of these materials - yes, they have been written using the literate programming approach. And what is the syntax in which they are written? Markdown. And are they version controlled? Absolutely yes. Once you have understood enough, you can even look at the files for generating these materials. I hope that will convince you to start adopting these practices.</p>"},{"location":"chapters/chapter_02/#25-summary","title":"2.5 Summary","text":"<ul> <li>To put it simply, in literate programming, we put the code and the prose that explains the code in the same file.</li> <li>The code and the prose are formatted differently so that computers (and users) can tell them apart.</li> <li>Practising literate programming in this way facilitates reproducibility, and enables other steps in the complete workflow.</li> <li>Markdown and Quarto are two important components in literate programming.</li> <li>The literate programming workflow is summarised below:</li> </ul>  Figure 2.1 The workflow of literate programming. The steps will be covered in detail in the next two chapters."},{"location":"chapters/chapter_02/#26-still-confused","title":"2.6 Still confused?","text":"<p>One major obstacle with learning literate programming, and the rest of this training programme is that the sheer amount of technical terms aka jargons confuses a researcher who codes but is not primarily in the field of computing and statistics. Here is a glossary that contains the terms that you might have come across with. If this looks Greek to you, don\u2019t worry, come back to this after you have covered the next two chapters. </p> <ul> <li>RStudio: Some poeple equate RStudio (the IDE) with R (the programming language), because they have been using RStudio the whole time to code in R, even though such equivalence is technically inaccurate. They cannot be blamed, however, because RStudio is arguably the best IDE for R, and there is growing support for other languages such as Julia, Python, C++, etc. And yes, you can write Quarto and Markdown documents in RStudio. The company that created RStudio has recently been renamed Posit, as the IDE becomes more agnostic on the programming language.</li> <li>Rmarkdown: The predecessor of Quarto, and essentially R + Markdown. There is another slightly inaccurate equivalence between Markdown and Rmarkdown. In short, an Markdown document is also an Rmarkdown document, but the converse is not true.</li> <li>pandoc: The description on its official page cannot be more precise: it is a universal document converter. This is the magic that creates the deliverable in multiple formats. You do not need to know how to work with pandoc directly, because RStudio takes care of it in the background.</li> </ul>"},{"location":"chapters/chapter_03/","title":"3. Writing prose for Literate Programming with Markdown: an Introduction","text":"<p>Learning Outcomes:</p> <ul> <li>Understand that markdown is a text formatting language</li> <li>Understand why markdown is useful for literate programming</li> <li>Learn basic of markdown that can be applied for literate programming</li> </ul>"},{"location":"chapters/chapter_03/#31-what-is-markdown","title":"3.1 What is Markdown?","text":"<p>Markdown is a simple markup language created by John Gruber in 2004. As a markup language, Markdown, allows you to format plain text to enhance presentation and readability of your text.  From a technical perspective, Markdown is two things: (i) a syntax or grammar for formatting plain text files and; (2) a software tool that converts plain text files to HTML. As a software Markdown is free and platform independent, meaning it can br run any device using any operating system.</p> <p>When using Markdown you annotate your text with chracters, such  as *s or #s, to achieve a desired formatting effect on that text (e.g. make a heading). In this sense it is different from WYSIWYG editors like Microsoft Word where you use buttons, keystrokes and mouse strokes to acheive a desired effect. Also, unlike WYSIWYG editors, you won\u2019t see the fruit of your formatting labours without an additional step of rendering your plain text file or notebook document into an HTML or other document format (these days some IDE\u2019s, e.g. the visual markdown editor in RStudio, support WYSIWYG rendering of Markdown in real time). </p>"},{"location":"chapters/chapter_03/#32-why-markdown-for-literate-programming","title":"3.2 Why Markdown for Literate Programming?","text":"<p>Recall that for literate programming, the narrative, rather than code, is the key focus, hence relevant and appropriate formatting of your text (e.g. using bold or italic font or incorporating images) is essential for other humans (perhaps your colleagues) to make sense of and engage with your code or analysis. Hence, literate programming involves mixing your code (written in Python,R etc.) with a document formatting or typesetting language to format your expositry narrative. HTML and LaTeX are two popular markup languages utilized for document formatting in literate programming for scientific research. However, unlike these other markup langguages, Markdown is simple and lightweight. This means you can focus on constructing engaging and efficient narrative without kicking a fuss over what code or tag is required to make your text appear, for e.g., in bold or italic font. Compared to other markup languages, you can learn Markdown quickly and hence focus more on your content writing.</p> <p>Figure 3.1 displays a comparison of the code require to format plain text into bold, italic or both in LaTex versus Markdown. From the code below it showed be obvious how the markdown syntax is much simpler than LaTeX (or indeed other markup languages). Additionally, withouth even rendering the markdown annotated text, it remains easily readable by humans. More complex formatting like generating tables, inserting images, requires even more complex code in markup languages like LaTex or HTML, but remains simple in Markdown as you will see in the next section. This simplicity of Markdown means there is little overhead in learning the document formatting language for literate programming, freeing your mind to focus on your content.</p>  Figure 3.1 Comparing markup syntax of Latex verus Markdown. Code for either markup language is highlighted in yellow. On rendering either document, the markedup text should display in bold, italics or both.  <p>Markdown\u2019s growing popularity as the document formatting language of choice in literate programming needs is reflected in the availability of markdown support (in many cases right out of the box without any additional installation!) for popular IDEs and notebook formats such as RStudio, VS Code, Jupyter Notebooksand even GitHub (a code hosting platform for colloboration and version control - if you are unfamiliar with GitHub, don\u2019t worry, this will be covered in a following course). </p> <p>Basic Markdown vs. Markdown Extensions</p> <p>Markdown\u2019s simplicity comes at a cost: there are only a limited amount of formatting effects available to you in basic or vanilla Markdown. However, many applications supporting Markdown e.g. Jupyter Notebooks, R/RStudio, GitHub etc. provide thier own extensions of Markdown syntax which let you do more complex formatting with the simplicity of Markdown-like syntax. Additionally, if your needs ever grow, worry not, tools like pandoc allow you to mix more flexible formatting languages such as LaTeX and/or HTML with Markdown allowing you to format your text to  your heart\u2019s desire.</p>"},{"location":"chapters/chapter_03/#33-how-to-use-markdown","title":"3.3 How to use Markdown","text":"<p>It\u2019s time to get our hands dirty and start getting some practise in how to use Markdown to format our text. For the examples and exercises that follow, you will need to implement markdown in RStudio/Quarto. Latest versions of RStudio come pre-installed with Quarto.</p> <p>In Rstudio you can do this as follows:</p> <ol> <li>Go to the File menu, select New file, theb select Quarto Document\u2026, alternatively you also use the new file button to do the same, and this is what is done in the video below. This will open up a dialog box with several options. Leave everything as default but uncheck the <code>use visual markdown editor</code> option. Feel free to add a Title and Author in the relevant fields, then hit the create button.</li> <li>This will open a new Quarto Document in RStudio\u2019s source editor (this where you normally write your R scripts). You can then add your text and markdown annotation in the body of the document. The body of the document referes to any space below the text between the <code>---</code> at the top. This latter section is called the YAML and controls how the document will look when rendered. You can just ignore the YAML for now, we\u2019ll talk more about this in the (next lesson)[../Chapter_04]. Note that RStudio will automatically generate some standard text, code and markdown to give you flavour of this literate programming document works. Optional: delete everything in the body of the file making sure not to delete the YAML.</li> <li>After adding your text and markdown annotation to the document hit the <code>render</code> button to generate an HTML document (default). If you haven\u2019t yet saved your document, RStudio will ask you save the document before rendering. Once saved, RStudio will generate an HTML docuement that shows your text but formatted according to any markdown code. The next time you make a cahnge to your Quarto Document and hit render, RStudio will automatically save the changes to your Quarto document before rendering.</li> </ol> <p></p> <p>Rendering Markdown without a rendering step</p> <p>Since 2021 RStudio now has also has a visual markdown editor that renders your markdown formatting live as  you type it in the Quarto document.</p>"},{"location":"chapters/chapter_03/#331-formatting-text","title":"3.3.1 Formatting text","text":"<p>You should have already seen examples of how to italicise or embolden you text (and both simulatenously) with markdown. There is other useful markdown sytnax for example for starting a new paragraph, use a blank like to seperate your paragraphs or if you want a monospaced font to represent <code>code</code> in your text, enclose the relevant code in single backticks:`\\`.</p> <p>Exercise</p> <p>Below is some text produced using markdown formatting. Use your preferred markdown editor, to write markdown annotated text, to achieve the following result:   </p> <p>The <code>mean()</code> function on <code>line 13</code> calcualtes the average of the vector.</p> <p>Make sure to render your markdown text to make sure it works like you think it should.</p> Solution <p><code>The `mean()` function on `line 13` calcualtes the **average** of the vector.</code></p> <p>As mentioned in Section 3.2, Markdown\u2019s simplicity comes at a cost. Not all formatting elements are natively represented in markdown. Depending on your application an extended syntax for Markdown may exist (e.g. Rmarkdown, which may offer a solution. In many cases HTML can help you acheive the desired result. Most applications rendering Markdown also support HTML. This does not mean you need to know HTML but you may have to rely on your googling or prompt engineering skills.</p> <p>Exercise</p> <p>There is no native support for sub- or superscripts in markdown, however HTML tags can do the trick. Use your technical sophistication (googling or otherwise) to write Markdown- (and HTML) formatted text text to achive the following result:  </p> <p>An example of a subscript is C0<sub>2</sub>. An example of a superscript is 3<sup>3</sup>=27.</p> <p>Make sure to rener your markdown text to make sure it works like you think it should.</p> Solution <p>An example of a subscript is C0<code>&lt;sub&gt;</code>2<code>&lt;/sub&gt;</code>. An example of a superscript is 3<code>&lt;sup&gt;</code>3<code>&lt;/sup&gt;</code>=27.</p> <p><code>&lt;sub&gt;&lt;/sub&gt;</code> and <code>&lt;sup&gt;&lt;/sup&gt;</code> are the HTML tags for subscripts and superscripts respectively. Some Makrdown editos also support encapsulating text in \\^ or \\~ for formattting superscript and subscript. respetively.</p>"},{"location":"chapters/chapter_03/#332-adding-headers","title":"3.3.2 Adding Headers","text":"<p>Your literate programming document needs to be divided into sections. Perhaps you sub-sections or sub-sub-sections? Markdown provides simple syntax for header formatting that provides 6 levels of headings to fullfill your sub-sectioning needs. To render headers using markdown all you need to do is start a line with a <code>#</code>, followed by a space and then your title, like so:</p> <p>Headers</p> Markdown:Rendered output: <p><code>#### My Excellent Title</code></p> <p>The number of <code>#</code> controls the size or level of the headers - more means smaller headers.</p> <p>Generating Headers of different size</p> <p>The following headers have been produced using Markdown. Can you reproduce them using Markdown-formatted text?</p>"},{"location":"chapters/chapter_03/#my-excellent-title","title":"My Excellent Title","text":""},{"location":"chapters/chapter_03/#my-smaller-section-title","title":"My smaller section title","text":""},{"location":"chapters/chapter_03/#this-is-my-other-header","title":"This is my other header","text":"Solution <p><code>#### My smaller section title</code></p> <p><code>##### This is my _other_ header</code></p>"},{"location":"chapters/chapter_03/#333-making-lists","title":"3.3.3 Making Lists","text":"<p>Every now and then, documentation of your code or analysis will need a list. Maybe it is a list of dependencies your colleague s need to run your code or perhaps it a list of genes you need to highlight in your latest gene expression anlaysi. It is easy to generate lists in Markdown. Basic Markdown supports ordered (i.e. numbered) or unordered lists.</p> <p>You can make ordered ordered lists by adding line items with numbers followed by periods. The numbers don\u2019t have to be in numerical order, but the list should start with the number one.</p> <p>Ordered lists</p> Markdown:Rendered output: <pre><code>1. first item\n2. second item\n3. third item\n</code></pre> <ol> <li>first item</li> <li>second tiem</li> <li>third item</li> </ol> <p>You can generate an unordered list, add dashes (-), asterisks (*), or plus signs (+) in front of line items.</p> <p>Unordered lists</p> Markdown:Rendered output: <pre><code>* first item\n* second item\n* third item\n</code></pre> <ul> <li>first item</li> <li>second tiem</li> <li>third item</li> </ul> <p>Making nested lists</p> <p>It is easy to generate nested lists in Markdown. Can you reproduce the following nested list using Markdown-formatted text?</p> <ol> <li>First item</li> <li>Second item</li> <li>Third item<ul> <li>Indented item A</li> <li>Indented item B</li> </ul> </li> <li>Fourth item</li> </ol> Solution <pre><code>1. First item\n2. Second item\n3. Third item\n     - Indented item A\n     - Indented item B\n4. Fourth item\n</code></pre>"},{"location":"chapters/chapter_03/#334-adding-images-and-links","title":"3.3.4 Adding Images and Links","text":"<p>Every now and then you may need to provide a link in your literate document. You can provide links in basic Markdown in two ways. The first one we demonstrate are called _inline_links: here you provide the text of the link in square brackets ([ ]`) and the link itself follows in paranthesis.</p> <p>Inline links</p> Markdown:Rendered output: <pre><code>[Visit Elixir!](https://elixir-europe.org/)\n</code></pre> <p>Visit Elixir!</p> <p>The other type of link in basic Markdown is a reference link. In this case the link is to another place in your literate document itself, kind of almost like a citation. </p> <p>Reference links</p> Markdown:Rendered output: <pre><code>Want to do [Repdroducible Science?][link one]\nHere are some [practical guides][another-link]. \nDon't forget to read [this article][link one] in its entirety. \n\n\n[link one]: https://www.nature.com/articles/s41562-016-0021\n[another-link]: https://ziemann-lab.net/public/5pillars/practical_guides.html\n</code></pre> <p>Want to do Repdroducible Science?. Here are some practical guides.  Don\u2019t forget to read this article in its entirety. </p> <p>The \u201creferences\u201d above are the second set of brackets: link one and another-link. At the bottom of a Markdown document, these brackets are defined as proper with a colon and then links to outside websites. An advantage of the reference link style is that multiple links to the same place only need to be updated once, as you would expect from a citation management software e.g. (Zotero), but as you\u2019ll see later there are better ways to do citations using extended in Markdown. Also note the reference links (the one at the bottom) don\u2019t actually appear in the renderded markdown document above.</p> <p>Similar to links you can add images in two ways. Additionally images can be online urls or from your local computer (in which case you need to provide the path to the image on your local computer instead of the url). Similar to links, one way to displayimg images is called inline image link. To generate one if these you add an exclamation mark (!), followed by square brackets ([ ]) that can optional include alt text the image (to make your content more accessible for visually impaired readers) and then finally the link (or path) to the image in parenthesis.</p> <p>Inline image links</p> Markdown:Rendered output: <pre><code>![Two happy penguins taking a selfie together in a snowy landscape](https://github.com/allisonhorst/stats-illustrations/blob/main/julie-mine-quarto-keynote/quarto_share.png?raw=true)  \n\n\"Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine \u00c7etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\"\n</code></pre> <p>  \u201cArtwork from \u201cHello, Quarto\u201d keynote by Julia Lowndes and Mine \u00c7etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\u201d</p> <p>You can make reference image links very similar to how you would make inline links. Redoing the inline image link is a reference image link is left as an exercise for the reader. </p>"},{"location":"chapters/chapter_03/#335-making-tables","title":"3.3.5 Making Tables","text":"<p>At some point in your literate document, you may want to present information in a table. Although basic Markdown does not come with a syntax to make tables, almost all extensions now have a universal syntax to do so. </p> <p>To make a table, use three or more hyphens (\u2014) to create each column\u2019s header, and use pipes (|) to separate each column.</p> <p>Tables</p> Markdown:Rendered output: <p></p><pre><code>| Column 1    | Column 2    |\n| ----------- | ----------- |\n| blah        | blah        |\n| blah        | blah        |\n</code></pre> Note: the cell widths don\u2019t have to be fixed as above and can vary, yiedling the same output (try it yourself if you don\u2019t believe me)  Column 1 Column 2 blah blah blah blah <p>Making a two column table</p> <p>Can you write the Markdown-formatted text to generate the exact following table (don\u2019t forget the cell alginment)?</p> Gene p-value Gene A 0.1 Gene B 0.005 Gene C 0.01 Solution <pre><code>| Gene        | _p-value_ |\n| :----------:| :--------:|\n| Gene A      | 0.1  |\n| Gene B      | 0.005|\n| Gene C      | 0.01 |\n</code></pre> <p>Making tables in Markdown\u2026</p> <p>Making small tables is simple enough but making larger tables can get painful in markdown. For larger tables in markdon the Markdown Tables Generator is a great tool. Make your table using their graphical interface and then copy the generated Markdown-formatted text into your file. In RStudio you can use the visual editor to do the same, so you don\u2019t even have to leave the warm confines of RStudio.</p>"},{"location":"chapters/chapter_03/#336-paragraphs","title":"3.3.6 Paragraphs","text":"<p>Formatting paragrahs is simple but perhaps not as intuitive in Markdown. For example, consider the verse below (I got ChatGPT to wax poetic about the graces of Markdown):</p> <p>In the realm of code, where words and logic intertwine, There exists a tool, both simple and sublime. Markdown, the poet\u2019s brush, the programmer\u2019s aid, Unveils the advantages of a seamless cascade.  </p> <p>You may be tempted to think, that way you format a pargraph like this in Markdown would be like so:</p> <pre><code>In the realm of code, where words and logic intertwine,\nThere exists a tool, both simple and sublime.\nMarkdown, the poet's brush, the programmer's aid,\nUnveils the advantages of a seamless cascade.\n</code></pre> <p>Unfortunately, if you did this the whole verse would come in a single line! Not very fitting for a poem.</p> <p>To acheive the desired affect, you can enforce a hard break by inserting a new line between each line of the verse:</p> <p>Hard breaks for formatting</p> Markdown:Rendered output: <pre><code>In the realm of code, where words and logic intertwine,\n\nThere exists a tool, both simple and sublime.\n\nMarkdown, the poet's brush, the programmer's aid,\n\nUnveils the advantages of a seamless cascade.\n</code></pre> <p>In the realm of code, where words and logic intertwine,</p> <p>There exists a tool, both simple and sublime.</p> <p>Markdown, the poet\u2019s brush, the programmer\u2019s aid,</p> <p>Unveils the advantages of a seamless cascade.</p> <p>The hard break works but not the formatting is now disconnected between the Markdown document and the rendered output. A more subtle way to achieve this sort of paragraph formatting effect is to use what is called soft break. A soft break involves inserting two blank spaces with the Space key at the end of each line. A soft break acheives the same effect a a hard break but leaves more of a semblance between the text in the Markdown document and the final rendered document. which may be more desirable in several instances.</p> <p>Using soft breaks</p> <p>Here is the last verse from the ChatGP epic poem about the advanatges of Makrdown for literate progamming:</p> <p>So let markdown be your ally, your creative friend, In the realm of literate programming, where wonders never end. For within its simplicity lies a powerful tool, Unleashing the potential of both scholar and fool.  </p> <p>Use soft breaks in Markdown to recreate the formatted verse above.</p>"},{"location":"chapters/chapter_03/#34-summary","title":"3.4 Summary","text":"<ul> <li>Markdown is a simple language for formatting text.  </li> <li>Markdown is not the only tool for formatting text but it\u2019s easy to learn making it one of the most popular tools for various purposes including Literate Programming.  </li> <li>Markdown is supported by many of the popular IDEs including RStudio</li> <li>Although basic Markdown has limited functionality, many extensions, often language-specific, exist to enhance Markdown\u2019s capability.</li> </ul>"},{"location":"chapters/chapter_05/","title":"5. Putting it all together","text":""},{"location":"chapters/chapter_05/#51-putting-it-all-together","title":"5.1 Putting it all together","text":"<p>Now that you have been introduced to:</p> <ol> <li>The importance of literate programming (LP)</li> <li>Using markdown to narrate your code</li> <li>Using Quarto to knit your code and narrative into a single LP-compliant document</li> </ol> <p>It is time for a more comprehensive rounding-off exercise to bring it all together.</p> <p>Exercise</p> <p>Return to our original example of non-LP script and rework it into a full fledged literate programming  document by applying uour knowledge of markdown and quarto to transform the original script into an LP HTML or PDF document (Fig. 5.1).</p> <p>Specifically:</p> <ol> <li>Obtain the analysis.R script, copy the script into a new empty script in your RStudio environment  </li> <li>Convert the script into a .Qmd or .Rmd document, with explanatory text and code chunks for plain code and plots</li> <li>Knit your final .Qmd or .Rmd file to a PDF (or HTML) document </li> </ol> Solution <p>There are no right or wrong answers here but certain solutions will definitely be better than others. if you get stuck or need inspiration check out one possible solution here</p>  Figure 5.1 Going from the script (Winconsin.R) to a Qmd (or Rmd) file that can be knitted into a LP PDF or similar LP document."},{"location":"chapters/chapter_06/","title":"6. Conclusion and next steps","text":""},{"location":"chapters/chapter_06/#61-concluding-remarks","title":"6.1 Concluding Remarks","text":"<p>Great job in making it to the end of this module! Along the way we hope you haved:</p> <ol> <li>Developed an appreciation for the need and principles of Literate Programming (LP) in research</li> <li>Acquired some new skills in Markdown and conducting LP using R/RStudio and Quarto</li> </ol> <p>As with most technical skills, mastery requires practice, practice and more practice. We hope the lessons here have prepared you to adopt an LP approach for your next project!</p> <p>For those who want a deeper dive or learn more about a specifc aspect of this course, below is a selection our favourite links on learning Literate Programming, Markdown, and LP with RStudio/Quarto. Additionally, this course is the first part in a multi-series programme on implementing code reproducibility for research. Links and brief descriptions of further course in the series can be found further below.</p>"},{"location":"chapters/chapter_06/#62-further-resources-on-literate-programming-with-rstudioquarto","title":"6.2 Further Resources on Literate Programming with RStudio/Quarto","text":"<p>Below are some of our favourite links, ranging from from comprehensive references to short tutorials.</p> Content Description Link Markdown Essentials This Markdown Guide offers a short and handy reference to the basic syntax or grammar of markdown. https://www.markdownguide.org/basic-syntax/ Markdown Practice Want to practise some more markdown? Try this excellent, standalone Markdown tutorial. https://www.markdowntutorial.com/ Markdown Cheatsheet Because sometimes, a concise cheatsheet is all you need\u2026 https://www.markdownguide.org/cheat-sheet/ RMarkdown Cheatsheet A handy cheatsheet for the R extension for Markdown (RMarkdown) https://shiny.posit.co/r/articles/build/rm-cheatsheet/ RMarkdown Cookbook Complete guide for RMarkdown that can be extended to Quarto documents with slight syntax modifications https://bookdown.org/yihui/rmarkdown-cookbook/ Code chunk options Full list of options (lines that start with #|) you can use for Quarto documents, again with syntax modifications https://yihui.org/knitr/options/"},{"location":"chapters/chapter_06/#63-next-steps-in-code-reproducibility","title":"6.3 Next Steps in Code Reproducibility","text":"<ul> <li>Version control : https://elixir-europe-training.github.io/ELIXIR-TrP-VersionControlR-CodeRep/</li> <li>Documentation: https://elixir-europe-training.github.io/ELIXIR-TrP-DocumentationR-CodeRep/</li> <li>Testing: https://elixir-europe-training.github.io/ELIXIR-TrP-TestingR-CodeRep/</li> <li>CI/CD: https://elixir-europe-training.github.io/ELIXIR-TrP-CICD-R-CodeRep/</li> <li>Containers: https://elixir-europe-training.github.io/ELIXIR-TrP-ContainersR-CodeRep/</li> </ul>"},{"location":"chapters/chapter_06/#64-contributing-to-this-course","title":"6.4 Contributing to this course","text":"<p>This course has been developed via a colloboration of researchers, teachers and students.  Found a typo? Something missing? Have a suggestion? We welcome further contributions and suggestions from everyone. If you would like to contribtue to course development, have a suggestion or just want more information, go here. </p>"},{"location":"chapters/references/","title":"References","text":""},{"location":"chapters/references/#references-go-here","title":"References go here","text":""},{"location":"keywords/","title":"Keywords","text":"<p>Here\u2019s a lit of used keywords:</p> <p>mkdocs </p>"}]}